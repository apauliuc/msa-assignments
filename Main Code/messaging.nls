; Send a message to a bus and record the type of sending.
; Params:
;   {number} recipient_id: local id to send to.
;   {string} message_type: the type of message (e.g. 'sos', 'init')
;   {string} message: the message to be sent; any time of string
; Sets:
;   {table} messages_sent
to send [recipient_id message_type message]
  let wait_time 0
  if message_type = "WORKER_INIT" [ set wait_time 2 ]
  if message_type = "WORKER_INIT_REPLY" [ set wait_time 0 ]
  if message_type = "MASTER_INIT" [ set wait_time 1 ]
  if message_type = "MASTER_INIT_REPLY" [ set wait_time 0 ]
  if message_type = "SOS" [ set wait_time 1 ]
  if message_type = "SOS_REPLY" [ set wait_time 1 ]
  
  let outbox_group (table:get outbox message_type)
  table:put outbox_group recipient_id (list ticks (ticks + wait_time))
  table:put outbox message_type outbox_group

  send-message recipient_id (word message_type " " message)
end

; Send message to all busses.
; Params:
;   {string} message_type: the type of message (e.g. 'sos', 'init')
;   {string} message: the message to be sent; any time of string
to broadcast [message_type message]
  let no_busses (count buses - 1) + (length graph)
  let i length graph
  while [i < no_busses]
  [
    if i != bus_id [
      send i message_type message
    ]
    set i i + 1
  ]
end

; Send message to all masters.
; Params:
;   {string} message_type: the type of message (e.g. 'SOS', 'INIT')
;   {string} message: the message to be sent; any time of string
to broadcast-to-masters [message_type message]
  let no_masters (min (list (length predef_bus_routes) (count buses)))
  let i (length graph)
  while [i < (length graph + no_masters)]
  [
    if i != bus_id [
      send i message_type message
    ]
    set i i + 1
  ]
end

; Remove messages which have expired from the outbox.
; Sets:
;   {table} outbox
to process-outbox
  foreach table:keys outbox [
    let message_type ?
    let outbox_group (table:get outbox message_type)
    foreach table:keys outbox_group [
      let recipient_id ?
      let sent_message_meta (table:get outbox_group recipient_id)
      let expected_receive_tick (item 1 sent_message_meta)
      if expected_receive_tick < ticks [
        table:remove outbox_group recipient_id
      ]
    ]
    table:put outbox message_type outbox_group
  ]
end
