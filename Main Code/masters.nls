; Initialise master bus.
to master-init
  ; Set init state
  format-log 0 "Master bus spawned. Setting state to 'MASTER_INIT'."
  set state "MASTER_INIT"

  ; Masters take predefined bus routes.
  set route_id (local_id mod (length predef_bus_routes))

  ; Create master fleet table and initialise with own route.
  set master_fleet table:make
  table:put master_fleet bus_id route_id

  ; Create route fleet table.
  set route_fleet table:make

  ; Generate the bus route.
  setup-bus-route false
  set on_route false
  set path_to_start_route []

  ; Create sos_replies list.
  set sos_replies table:make

  ; Create sos_masters list.
  set received_sos_messages table:make

  ; Create requested_workers list.
  set worker_requests table:make

  ; Create requested_workers list.
  set worker_inits table:make

  ; Create requested_workers list.
  set worker_arrived table:make

  ; Broadcast route to all masters.
  broadcast-to-masters "MASTER_INIT" route_id
end

; Exectue block for master buses.
to master-execute-actions
  ; Hack to add all the masters.
  if bus_id = length graph and ticks = 2 [
      add-masters
  ]

  master-update-state
  if state = "MASTER_INIT"  [
    ; do nothing for now.
  ]

  if state = "MOVING_TO_ROUTE" [
    ifelse current_stop = br_start
    [
      master-register-reached-start
    ]
    [
      find-path-to-start
      travel-to first path_to_start_route

      if current_stop = br_start [
        master-register-reached-start
      ]
    ]
  ]

  if state = "BUSINESS_AS_USUAL" [
    master-check-send-sos
    master-reply-to-sos

    ifelse has-passengers
    [

      if current_stop = br_stop
      [
        setup-bus-route true
      ]

      if at-stop [
        drop-off
        pick-up
        remove-stop-from-route
      ]

      travel-to first remaining_bus_route
    ]
    [
;      format-log 1 (word "No passengers on route " route_id ".")
    ]
  ]

  if state = "SOS_SENT" [
    master-resolve-sos

    ifelse has-passengers
    [
      if current_stop = br_stop [
        setup-bus-route true
      ]
      if at-stop [
        drop-off
        pick-up
        remove-stop-from-route
      ]

      travel-to first remaining_bus_route
    ]
    [
      ;format-log 1 (word "No passengers on route " route_id ".")
    ]
  ]
end

; Master update state
; Sets:
;   {string} state
to master-update-state
  let master_init_messages table:get outbox "MASTER_INIT"
  if state = "MASTER_INIT" and table:length master_init_messages = 0 [
    format-log 0 "MASTER_INIT messages expired. Moving state to 'MOVING_TO_ROUTE'."
    set state "MOVING_TO_ROUTE"
  ]

  if state = "MOVING_TO_ROUTE" and on_route [
    format-log 0 "Reached start of route. Moving state to 'BUSINESS_AS_USUAL'."
    set state "BUSINESS_AS_USUAL"
  ]

  let sos_messages table:get outbox "SOS"
  if state = "BUSINESS_AS_USUAL" and table:length sos_messages > 0 [
    format-log 0 "SOS messages have been sent out. Moving state to 'SOS_SENT'"
    set state "SOS_SENT"
  ]

  if state = "SOS_SENT" and (table:has-key? (table:get outbox "WORKER_INIT_REPLY") ticks or table:has-key? (table:get outbox "HELP_REQUEST") ticks) [
    format-log 0 "Help has been requested via existing worker or new bus. Moving state to 'HELP_REQUESTED'"
    set state "HELP_REQUESTED"
  ]

  if state = "HELP_REQUESTED" and table:has-key? worker_arrived ticks [
    format-log 0 "Help has arrived on route. Moving state to 'BUSINESS_AS_USUAL'"
    set state "BUSINESS_AS_USUAL"
  ]

  ; if state = "SOS_SENT" and table:length sos_messages = 0 and finished_current_pass [
  ;   format-log 0 "Full pass completed with no replies to SOS. Moving state to 'BUSINESS_AS_USUAL'"
  ;   set state "BUSINESS_AS_USUAL"
  ; ]
end

; Send SOS to all master buses if necessary.
to master-check-send-sos
  let overcapacity ((count-passengers-on-route bus_route) - master-get-fleet-capacity)
  if overcapacity > 0 [
    format-log 0 (word "Sending SOS message to all buses. Overcapacity: " overcapacity ".")
    let request_type type-from-capacity overcapacity
    broadcast-to-masters "SOS" request_type
    let received_sos_message (list bus_id request_type)
    table:put received_sos_messages (ticks + 1) (list received_sos_message)
  ]
end

; Reply to SOS message from master bus if any. Can tune the threshold parameter: 2. ;
; TODO: extend logic for list of buses in reply.
to master-reply-to-sos
    let threshold 2

    if (table:has-key? received_sos_messages ticks and (length (table:get received_sos_messages ticks) > 1))
    [
        format-log 0 "SOS messages received. Checking fleet capacity."
        let current_sos_messages (table:get received_sos_messages ticks)

        let fleet_capacity master-get-fleet-capacity
        let route_demand count-passengers-on-route bus_route

        let fleet (table:to-list route_fleet)
        set fleet remove-item 0 fleet
        set fleet map [ (replace-item 1 ? (type-from-capacity (item 1 ?))) ] fleet

        if (fleet_capacity > threshold * route_demand) and (length fleet != 0)[
            format-log 0 (word "Capacity is above threshold. Replying to message. Extra capacity: " (fleet_capacity - threshold * route_demand))

            foreach current_sos_messages [
                let current_sos_message ?
                send (item 0 current_sos_message) "SOS_REPLY"  (item 0 fleet)
            ]
        ]
    ]
end

; Resolve SOS message sent by master by calling worker or adding new bus
to master-resolve-sos
    ; If there are worker request, it means you need to add a new bus.
    if table:has-key? worker_requests (ticks - 2)
    [
        let current_worker_requests table:get worker_requests (ticks - 2)
        set current_worker_requests group-list-by-type current_worker_requests

        let current_worker_inits []
        ifelse table:has-key? worker_inits ticks
        [ set current_worker_inits table:get worker_inits ticks ]
        [ format-log 1 (word "No current worker ") ]
        set current_worker_inits group-list-by-type current_worker_inits

        let associated_worker master-resolve-associations current_worker_requests current_worker_inits
        ifelse (item 0 associated_worker != false)
        [
            format-log 2 (word "Replying to worker" item 0 associated_worker)
            send (item 0 associated_worker) "WORKER_INIT_REPLY" route_id
            table:put route_fleet (item 0 associated_worker) (capacity-from-type (item 1 associated_worker))
        ]
        [
            format-log 1 "No associated worker found."
        ]
    ]

    if table:has-key? received_sos_messages (ticks - 1)
    [
        ; Get all busses that have sent an SOS at same time as this bus. Group the list by bus type.
        let current_sos_messages table:get received_sos_messages (ticks - 1)
        set current_sos_messages group-list-by-type current_sos_messages

        ; Get all sos replies and split the list by bus type.
        let current_sos_replies []
        if table:has-key? sos_replies (ticks - 1) [
            set current_sos_replies table:get sos_replies (ticks - 1)
        ]
        set current_sos_replies group-list-by-type current_sos_replies

        let associated_worker master-resolve-associations current_sos_messages current_sos_replies
        ifelse (item 0 associated_worker)
        [
            send (item 0 associated_worker) "HELP_REQUEST" route_id
            table:put route_fleet (item 0 associated_worker) (capacity-from-type (item 1 associated_worker))
        ]
        [
            format-log 0 "No associated worker found. Adding new bus."
            let overcapacity ((count-passengers-on-route bus_route) - master-get-fleet-capacity)
            let request_type (type-from-capacity overcapacity)
            add-bus request_type
        ]
    ]
end

; Resolve association between SOS requests and responses
; Params:
;   {list} request_ids:
;   {list} responder_ids:
; Reports:
;   {list} current_worker_requests: [bus_id bus_type] (bus_id can be false)
to-report master-resolve-associations [request_ids responder_ids]
    ; Iterate over bus types
    let current_worker_requests []
    let i 0
    while [i <= 2]
    [
        let requests_by_type item i request_ids
        let responders_by_type item i responder_ids

        let curr_master_req_pos position bus_id requests_by_type

        if is-number? curr_master_req_pos and curr_master_req_pos < length responders_by_type
        [
            ; Current master has responder; call it to help
            report (list (item curr_master_req_pos responders_by_type) (i + 1))
        ]

        ; Store all requests for which responders do not exist
        if length requests_by_type > length responders_by_type
        [
            let idx length responders_by_type
            while [idx < length requests_by_type]
            [
                let worker_details (list (item idx requests_by_type) (i + 1))
                ifelse length current_worker_requests = 0
                [
                    set current_worker_requests (list worker_details)
                ]
                [
                    set current_worker_requests (lput worker_details current_worker_requests)
                ]

                set idx idx + 1
            ]
        ]
        set i i + 1
    ]
    table:put worker_requests ticks current_worker_requests
    report (list false 1)
end

; Registers an arrival internally and adds the capacity to route_fleet
; Sets:
;   {table} route_fleet
to master-register-reached-start
  register-reached-start
  table:put route_fleet bus_id bus_capacity
end

to-report master-get-fleet-capacity
  let fleet_capacity 0
  foreach (table:keys route_fleet) [
    let fleet_bus_id ?
    set fleet_capacity (fleet_capacity + (table:get route_fleet fleet_bus_id))
  ]
  report fleet_capacity
end
