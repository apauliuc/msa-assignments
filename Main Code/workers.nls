;Initialise worker bus.
to worker-init
  format-log 0 "Worker bus spawned. Setting state to 'WORKER_INIT'."

  set help_requests table:make

  set state "WORKER_INIT"

  set worker_init_replies table:make
  set help_requests table:make

  ; Initialise route id to fake value.
  set route_id -1
  set help_request_tick -1
end

; Exectue block for worker buses.
to worker-execute-actions
  worker-update-state

  if state = "WORKER_INIT" [
    ; Broadcast init to masters.
    ; move to init.
    let sent_inits table:get outbox "WORKER_INIT"
    let has_init_sent (length (table:keys sent_inits)) != 0
    let wait_tick 0
    if has_init_sent [
      set wait_tick (item 1 (table:get sent_inits 24)) ; hardcoded '24' because we know that all the lists will be the same, and 24 will be a key
    ]

    ifelse has_init_sent
    [
      if ticks = wait_tick
      [
        set route_id read-from-string item 1 (item 0 (table:get worker_init_replies ticks)) ; work_init_replies from current ticks, because just now I received the reply
        setup-bus-route false
        set on_route false
        set my_master_id item 0 (item 0 (table:get worker_init_replies ticks))
        set path_to_start_route []
      ]
    ]
    [
        format-log 2 "Broadcasting to masters."
        broadcast-to-masters "WORKER_INIT" (type-from-capacity bus_capacity)
    ]
  ]

  if state = "MOVING_TO_ROUTE" [
    ifelse current_stop = br_start
    [
      worker-register-reached-start
    ]
    [
      find-path-to-start
      travel-to first path_to_start_route

      if current_stop = br_start [
        worker-register-reached-start
      ]
    ]
  ]

  if state = "BUSINESS_AS_USUAL" [
    ifelse has-passengers
    [
      if current_stop = br_stop
      [
        setup-bus-route true
      ]


      if at-stop [
        drop-off
        pick-up
        remove-stop-from-route
      ]

      travel-to first remaining_bus_route
    ]
    [
      ; format-log 1 (word "No passengers on route " route_id ".")
    ]
  ]

  if state = "PROVIDING_HELP" [

    if help_request_tick = -1 [
        set help_request_tick (ticks - 1)
    ]

    ifelse bus_count_passengers != 0
    [
      if current_stop = br_stop
      [
        let sender_id item 0 (table:get help_requests help_request_tick)
        let message_body item 1 (table:get help_requests help_request_tick)

        set route_id read-from-string message_body
        setup-bus-route false
        set on_route false
        set path_to_start_route []
        set my_master_id sender_id
        send sender_id "HELP_REQUEST_REPLY" "" ;LET MASTER KNOW THAT BUS MOVED
      ]

      if at-stop [
        drop-off
        remove-stop-from-route
      ]

      travel-to first remaining_bus_route
    ]
    [
        ifelse current_stop != -1 [
         let sender_id item 0 (table:get help_requests (ticks - 1))
         let message_body item 1 (table:get help_requests (ticks - 1))

         set route_id read-from-string message_body
         setup-bus-route false
         set on_route false
         set path_to_start_route []
         set my_master_id sender_id
         send sender_id "HELP_REQUEST_REPLY" "" ;LET MASTER KNOW THAT BUS MOVED

        ]
        [
            travel-to first remaining_bus_route
        ]
    ]
  ]
end

; Worker update state
; Sets:
;   {string} state
to worker-update-state
  if state = "WORKER_INIT" and route_id != -1 [
    format-log 0 "Received route. Moving state to 'MOVING_TO_ROUTE'."
    set state "MOVING_TO_ROUTE"
  ]

  if state = "MOVING_TO_ROUTE" and on_route [
    format-log 0 "Reached start of route. Moving state to 'BUSINESS_AS_USUAL'."
    set state "BUSINESS_AS_USUAL"
  ]

  if state = "BUSINESS_AS_USUAL" and (table:has-key? help_requests (ticks - 1)) and (not empty? (table:get help_requests (ticks - 1))) [
    format-log 0 "A master called for help. Moving state to 'PROVIDING_HELP'."
    set state "PROVIDING_HELP"
  ]

  if state = "PROVIDING_HELP" and not on_route [
    format-log 0 "Bus needs to provide help, and is not on any route, but will be. Moving state to 'MOVING_TO_ROUTE'."
    set state "MOVING_TO_ROUTE"
  ]
end

; Registers an arrival internally and sends arrival to master.
to worker-register-reached-start
  register-reached-start
  send my_master_id "HELP_ARRIVED" ""
end
