;Initialise worker bus.
to worker-init
  format-log 0 "Worker bus spawned. Setting state to 'WORKER_INIT'."

  set help_requests table:make

  set state "WORKER-INIT"

  ; Initialise route id to fake value.
  set route_id -1
end

; Exectue block for worker buses.
to worker-execute-actions
  worker-update-state

  if state = "WORKER_INIT" [
    ; Broadcast init to masters.
    ; move to init.
    broadcast-to-masters "WORKER_INIT" bus_capacity
  ]

  if state = "MOVING_TO_ROUTE" [
    ifelse current_stop = br_start
    [
      worker-register-reached-start
    ]
    [
      find-path-to-start
      travel-to first path_to_start_route

      if current_stop = br_start [
        worker-register-reached-start
      ]
    ]
  ]

  if state = "BUSINESS_AS_USUAL" [
    ifelse has-passengers
    [
      ifelse current_stop = br_stop
      [
        setup-bus-route true
        set finished_current_pass true
      ]
      [
        set finished_current_pass false
      ]

      if at-stop [
        drop-off
        pick-up
        remove-stop-from-route
      ]

      travel-to first remaining_bus_route
    ]
    [
      format-log 1 (word "No passengers on route " route_id ".")
    ]
  ]

  if state = "PROVIDING_HELP" [
    ifelse has-passengers
    [
      ifelse current_stop = br_stop
      [
;        setup-bus-route true    ; TODO: set route to helped route.
        set finished_current_pass true

        ; TODO: go to route where it is called
        let sender_id_message_body item 0 (table:get help_requests (ticks-1))
        let sender_id item 0 sender_id_message_body
        let message_body item 1 sender_id_message_body
        let new_route split-string message_body " "
        set remaining_bus_route new_route
        set br_start first new_route
        set br_stop last bus_route
        set on_route false
        set path_to_start_route []
        ; MUST LET MASTER KNOW THAT BUS MOVED
        ; TODO END.
      ]
      [
        set finished_current_pass false
      ]

      if at-stop [
        drop-off
        ; pick-up       ; TODO: pick-up just passangers in new route
        remove-stop-from-route
      ]

      travel-to first remaining_bus_route
    ]
    [
          ; TODO: go to route where it is called
          let sender_id_message_body item 0 (table:get help_requests (ticks-1))
          let sender_id item 0 sender_id_message_body
          let message_body item 1 sender_id_message_body
          let new_route split-string message_body " "
          set remaining_bus_route new_route
          set br_start first new_route
          set br_stop last bus_route
          set on_route false
          set path_to_start_route []
          ; MUST LET MASTER KNOW THAT BUS MOVED
          ; TODO END.
    ]
  ]
end

; Worker update state
; Sets:
;   {string} state
to worker-update-state
  if state = "WORKER_INIT" and route_id != -1 [
    format-log 0 "Received route. Moving state to 'MOVING_TO_ROUTE'."
    set state "MOVING_TO_ROUTE"
  ]

  if state = "MOVING_TO_ROUTE" and on_route [
    format-log 0 "Reached start of route. Moving state to 'BUSINESS_AS_USUAL'."
    set state "BUSINESS_AS_USUAL"
  ]

  if state = "BUSINESS_AS_USUAL" and (table:has-key? help_requests (ticks-1)) and (not empty? (table:get help_requests (ticks-1))) [
    format-log 0 "A master called for help. Moving state to 'PROVIDING_HELP'."
    set state "PROVIDING_HELP"
  ]

  if state = "PROVIDING_HELP" and not on_route [
    format-log 0 "bus needs to provide help, and is not on any route, but will be. Moving state to 'MOVING_TO_ROUTE'."
    set state "MOVING_TO_ROUTE"
  ]
end

; Registers an arrival internally and sends arrival to master.
to worker-register-reached-start
  register-reached-start
  send my_master_id "HELP_ARRIVED" ""
end
