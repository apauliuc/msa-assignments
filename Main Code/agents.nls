__includes [ "masters.nls" "workers.nls" "messaging.nls" "masters-messaging.nls" "workers-messaging.nls" "graph_helpers.nls" "passengers.nls" "helpers.nls" "scavengers.nls"]
extensions [table]
buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".

  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  predef_bus_routes           ; Hand-crafted list of bus routes.
  bus_routes_graph            ; Sparse graph of bus routes
  local_id                    ; Bus id for humans.
  route_id                    ; Route id for humans.

  state                       ; String representing the state of the bus.
                              ;   Possible master values: "MASTER-INIT", "MOVING_TO_ROUTE", "BUSINESS_AS_USUAL" "SOS_SENT", "REQUESTED_HELP"
                              ;   Possible worker values: "WORKER-INIT", "MOVING_TO_ROUTE", "BUSINESS_AS_USUAL", "PROVIDING_HELP"

  bus_route                   ; List of stops that the bus follows forward and backward.
  remaining_bus_route         ; List of remaining stops to the final stop.
  on_route                    ; Flag for the bus being on its route; if the bus is spawned somewhere outside the route, the flag is false, once it reaches the start it will always be true.
  br_start                    ; Start point of the bus route.
  br_stop                     ; End point of the bus route.
  path_to_start_route         ; The shortest path from the current bus point to br_start.

  bus_count_passengers        ; How many passengers are currently in the bus.
  bus_capacity                ; Bus passanger capacity.

  is_master                   ; Flag indicating if the bus is master and has extra rights. (e.g. adding new buses.)
  is_worker                   ; Flag indicating if the bus is only worker. (e.g. adding new buses.)
  is_scavenger                ; Flag indicating if the bus is a scavenger and behaves differently.
  my_master_id                ; The ID of the master of worker's route.

  outbox                      ; Table (key value pairs) of tables in the form (message_type: recipient_id: [send_tick expected_receive_tick])
  last_read                   ; Tick at which the inbox was last processed.



  ; Only available on master buses
  master_fleet                ; Table of master busses in the form (bus_id: route_id)
  route_fleet                 ; Table of busses on the master's route in the form (bus_id: bus_capacity)
  sos_replies                 ; Table of reply information for an SOS message in the form (tick: [ [bus_id capacity] ])
  received_sos_messages       ; Table of master buses that have sent an SOS message in the form (tick: [ [sos_sender_bus_id bus_type] ])
  worker_requests             ; Table of requests for new workes made by the master busses in the form (tick: [ [requester_id bus_type] ])
  worker_inits                ; Table of initialised worker buses in the form (tick: [ [initialised_id bus_type] ])
  worker_arrived              ; Table of workers arrived on route to help, in the form (tick: [bus_id])
  votes                       ; Table of votes in the form (tick:[ [bus_id true/false bus_type] ])
  voting_interval             ; Variable representing how often masters vote for adding a new scavenger

  ; Only available to worker buses
  worker_init_replies         ; Table of replies from the master. Similar to help_requests (tick:[sender_id message_body])
  help_requests               ; Table of received help requests in the form (tick:[sender_id message_body])
  help_request_tick           ; Variable representing

  ; Only available to scavenger buses
  next_station                ; Variable representing the short term destination of the scavenger

  enabled_log true            ; Whether to enable logging or not.

]

globals [graph]

; Initialise each bus.
to init-buses
  ; Set initial variables for all buses
  set bus_count_passengers 0
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  set predef_bus_routes [[3 16 11 1 19] [6 8 9 3 4 5 17 7 1 19] [2 8 9 20 12 15 18] [18 15 0 14 23 19] [3 4 10 13 23 19] [3 20 21 22 0] [18 15 12 22 13 10 5 16]]

  ; Define bus capacity
  set bus_capacity capacity-from-type bus_type

  ; The variable 'bus_routes_graph' contains the edge between X and Y
  ; only if there is a route that goes from X to Y (if there is not such route,
  ; even if there is a road between X and Y, the 'bus_routes_graph' does not contrain it)
  set bus_routes_graph create-graph-from-bus-routes predef_bus_routes

  ; Select bus route based on the bus id.
  set local_id (bus_id - length graph)
  ; Set master flag if first bus
  ifelse local_id < (length predef_bus_routes)
  [
    set is_master true
    set is_worker false
  ]
  [
    set is_master false
    set is_worker true
  ]
  set is_scavenger false ; all scavengers are first initialised as workers, and later transformed into scavengers

  ; Create table for storing messages sent
  set last_read -1
  set outbox table:make
  table:put outbox "MASTER_INIT" table:make
  table:put outbox "MASTER_INIT_REPLY" table:make
  table:put outbox "WORKER_INIT" table:make
  table:put outbox "WORKER_INIT_REPLY" table:make
  table:put outbox "SOS" table:make
  table:put outbox "SOS_REPLY" table:make
  table:put outbox "HELP_REQUEST" table:make
  table:put outbox "HELP_ARRIVED" table:make
  table:put outbox "PROVIDING_HELP" table:make
  table:put outbox "VOTE" table:make


  if is_master [
    master-init
  ]

  if is_worker [
    worker-init
  ]
end

; Ran at every tick by every bus. Add decision making strategies for your agents here. You are allowed to use the global variable 'ticks'.
to execute-actions
  process-outbox

  if is_master [
    master-process-inbox
    master-execute-voting
    master-execute-actions
  ]
  if is_worker [
    worker-process-inbox
    worker-execute-actions
  ]
  if is_scavenger [
    scavenger-execute-actions
  ]

end

; Setup the bus route to be the forward pass or the backward pass.
; Params:
;   {list} given_route: a tree containing the bus' predefined stops.
;   {boolean} reversed: flag indicating if the bus route should be sorted reversed.
; Sets:
;   {number} br_start: the beginning of the route.
;   {number} br_stop: the end of the route.
;   {remaining_bus_route}: the remaining stops, initialised to the full bus route.
to setup-bus-route [reversed]
  ifelse reversed
    [ set bus_route reverse bus_route ]
    [ set bus_route item route_id predef_bus_routes ]
  set br_start first bus_route
  set br_stop last bus_route
  set remaining_bus_route bus_route
end

; Register the arrival at the beginning of the bus route.
; Sets:
;    {boolean} on_route: set to true if the bus is at the start of the bus route.
;    {list} path_to_start_route: set to empty if the bus is at the start of the route.
to register-reached-start
  set on_route true
  set path_to_start_route []
end

; Search for path to the starting point of the route.
; Sets:
;   {list} path_to_start_route: initialise the shortest path, or remove a node once reached.
to find-path-to-start
  if path_to_start_route = [] [
    set path_to_start_route (get-shortest-path bus_routes_graph current_stop first remaining_bus_route)
  ]

  if current_stop = first path_to_start_route [
    set path_to_start_route remove-item 0 path_to_start_route
  ]
end

; Check if route and bus have waiting or travelling passengers.
; Reports:
;    {boolean} passengers exist.
to-report has-passengers
  report count-passengers-on-route bus_route != 0 or length bus_passengers != 0
end

; Check if bus is at a stop.
to-report at-stop
  report is-number? current_stop and current_stop != -1
end

; Drop off passengers at current stop.
; Sets:
;    {number} bus_count_passengers: nubmer of passengers in bus.
to drop-off
  foreach bus_passengers [
    if not can-transport-one-station current_stop item 1 ? bus_route [
      ;format-log 0 (word "Dropped passenger" ?)
      drop-off-passenger item 0 ?
      set bus_count_passengers length bus_passengers
    ]
  ]
end

; Pick up passengers that travel on the bus route.
; Sets:
;    {number} bus_count_passengers: nubmer of passengers in bus.
to pick-up
  let passengers_at_current_stop get-passengers-at-stop current_stop
  if length passengers_at_current_stop != 0 [
    foreach passengers_at_current_stop [
      if can-transport-one-station current_stop item 1 ? bus_route and bus_capacity > bus_count_passengers [
        ;format-log 0 (word "Picked passenger " ? )
        pick-up-passenger item 0 ?
        set bus_count_passengers length bus_passengers
      ]
    ]
  ]
end

; Remove the current stop from the bus route.
; Sets:
;    {list} remaining_bus_route: remove first element, the current stop.
to remove-stop-from-route
  set remaining_bus_route remove-item 0 remaining_bus_route
end

; Add master busses (type 1) on route in tick 2
to add-masters
  let i 1
  while [i < length predef_bus_routes]
  [
    add-bus 1
    set i i + 1
  ]
end

; Helper method to convert capacity to corresponding bus type
to-report type-from-capacity [capacity]
    if capacity <= 12 [
        report 1
    ]
    if capacity > 12 and capacity <= 60  [
        report 2
    ]
    if capacity > 60 [
        report 3
    ]
end

; Helper method to convert bus type to capacity
to-report capacity-from-type [_type]
    if _type = 1 [
        report 12
    ]
    if _type = 2  [
        report 60
    ]
    if _type = 3 [
        report 150
    ]
end
