  ; Process the inbox message by message.
; Sets:
;   {number} last_read:
to master-process-inbox
  let received_messages filter [item 0 ? >= last_read and item 0 ? < ticks] inbox

  foreach received_messages [
    let received_message ?
    let message_tick item 0 received_message
    let sender item 1 received_message
    let msg item 2 received_message

    let message_type substring msg 0 position " " msg
    let message_body substring msg (position " " msg + 1) (length msg)

    if message_type = "MASTER_INIT" [
      process-master-init-message message_type message_body sender
    ]
    if message_type = "MASTER_INIT_REPLY" [
      process-master-init-reply-message message_type message_body sender
    ]
    if message_type = "WORKER_INIT" [
        process-worker-init-message message_type message_body sender
    ]
    if message_type = "SOS" [
      process-sos-message message_type message_body sender
    ]
    if message_type = "SOS_REPLY" [
      process-sos-reply message_type message_body sender
    ]
    if message_type = "HELP_ARRIVED" [
      process-help-arrived-message message_type message_body sender
    ]
  ]

  set last_read ticks
end

; Store the sender's broadcasted bus route on the master_fleet and  send reply.
; Params:
;   {string} message_type
;   {string} message_body
;   {number} sender: bus id of the sender
; Sets:
;   {table} master_fleet
to process-master-init-message [message_type message_body sender]
  let message_tokens split-string message_body " "
  let route (item 0 message_tokens)

  table:put master_fleet sender route

  send sender "MASTER_INIT_REPLY" route_id
end

; Store the sender's replied bus route on the master_fleet.
; Params:
;   {string} message_type
;   {string} message_body
;   {number} sender: bus id of the sender
; Sets:
;   {table} master_fleet
to process-master-init-reply-message [message_type message_body sender]
    let message_tokens split-string message_body " "
    let route (item 0 message_tokens)

    table:put master_fleet sender read-from-string route
end

; Store the list of initialised workers and respective bus types
; Params:
;   {string} message type:
;   {list} message_body:
;   {num} sender_jd:
; Sets:
;   {table} worker_inits
to process-worker-init-message [message_type message_body sender_id]
    let message_tokens (split-string message_body " ")
    let worker_type (read-from-string (item 0 message_tokens))
    let current_worker_inits []
    if table:has-key? worker_inits ticks
    [ set current_worker_inits table:get worker_inits ticks ]
    set current_worker_inits lput (list sender_id worker_type) current_worker_inits
    table:put worker_inits ticks current_worker_inits
end

; Store the list of sos-senders by tick.
; Params:
;   {string} message type:
;   {list} message_body:
;   {num} sender_id:
; Sets:
;   {table} received_sos_messages
to process-sos-message [message_type message_body sender_id]
  let message_tokens (split-string message_body " ")
  let message_details (list sender_id read-from-string (item 0 message_tokens))
  let current_sos_messages []
  ifelse (table:has-key? received_sos_messages ticks)
  [
    set current_sos_messages (table:get received_sos_messages ticks)
    set current_sos_messages (lput message_details current_sos_messages)
  ]
  [
    set current_sos_messages (list message_details)
  ]
  table:put received_sos_messages ticks current_sos_messages
end


; Processes the SOS-REPLY message.
; Params:
;   {string} message type:
;   {list} message_body:
;   {num} sender_id:
; Sets:
;   {table} outbox
to process-sos-reply [message_type message_body sender_id]
    let outbox_group table:get outbox "SOS"
    let expected_senders table:keys outbox_group
    let current_sos_replies []
    if (table:has-key? sos_replies ticks) [
        set current_sos_replies table:get sos_replies ticks
    ]

    foreach expected_senders [
        let expected_sender ?
        let expected_message table:get outbox_group expected_sender
        if sender_id = expected_sender [
            ; handle response from bus helper.
            let sender_bus_capacity read-from-string message_body
            set current_sos_replies lput (list (item 0 sender_bus_capacity) (item 1 sender_bus_capacity)) current_sos_replies
            ; remove sent message from bus
            table:remove outbox_group expected_sender
        ]
    ]

    table:put sos_replies ticks current_sos_replies
    table:put outbox message_type outbox_group
end

; Processes the HELP_ARRIVED message.
; Params:
;   {string} message type:
;   {list} message_body:
;   {num} sender_id:
; Sets:
;   {table} worker_arrived
to process-help-arrived-message [message_type message_body sender_id]
    table:put worker_arrived ticks (list sender_id)
end
