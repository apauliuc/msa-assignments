; Process the inbox message by message.
; Sets:
;   {number} last_read:
to master-process-inbox
  let received_messages filter [item 0 ? >= last_read] inbox
  foreach received_messages [
    let received_message ?
    let message_tick item 0 received_message
    let sender item 1 received_message
    let msg item 2 received_message

    let message_type substring msg 0 position " " msg
    let message_body substring msg (position " " msg + 1) (length msg)

    if message_type = "MASTER-INIT" [
      process-master-init-message message_type message_body sender
    ]
    if message_type = "MASTER-INIT-REPLY" [
      process-master-init-reply-message message_type message_body sender
    ]
    if message_type = "SOS-REPLY" [
      process-sos-reply message_type message_body sender
    ]
    if message_type = "HELP-ARRIVAL" [
      process-help-arrival-message message_type message_body sender
    ]
  ]

  set last_read ticks
end

; Store the sender's broadcasted bus route on the master_fleet and  send reply.
; Params:
;   {string} message_type
;   {string} message_body
;   {number} sender: bus id of the sender
; Sets:
;   {table} master_fleet
to process-master-init-message [message_type message_body sender]
  let message_tokens split_string message_body " "
  let route (item 0 message_tokens)

  table:put master_fleet sender route

  send sender "MASTER-INIT-REPLY" route_id
end

; Store the sender's replied bus route on the master_fleet.
; Params:
;   {string} message_type
;   {string} message_body
;   {number} sender: bus id of the sender
; Sets:
;   {table} master_fleet
to process-master-init-reply-message [message_type message_body sender]
  let message_tokens split_string message_body " "
  let route (item 0 message_tokens)

  table:put master_fleet sender read-from-string route
end

; Processes the SOS-REPLY message.
; Params:
;   {string} message type:
;   {list} message_body:
;   {num} sender_id:
; Sets:
;   {table} outbox
to process-sos-reply [message_type message_body sender_id]
  let outbox_group table:get outbox "SOS"
  let expected_senders table:keys outbox_group
  foreach expected_senders [
    let expected_sender ?
    let expected_message table:get outbox_group expected_sender
    if sender_id = expected_sender [
        ; handle response from bus helper.
        let capacity read-from-string message_body
        set sos_replies lput (list sender_id capacity) sos_replies
        ; remove sent message from bus
        table:remove outbox_group expected_sender
    ]
  ]

  table:put outbox message_type outbox_group
end

; Processes the HELP_ARRIVAL message.
; Params:
;   {string} message type:
;   {list} message_body:
;   {num} sender_id:
to process-help-arrival-message [message_type message_body sender_id]

end
