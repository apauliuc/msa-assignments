; Create a sparse graph given predefined bus routes.
; Params:
;   {list} bus_routes: list of bus routes.
; Reports:
;   {list} new_graph: graph created from defined bus routes written as list of lists.
to-report create-graph-from-bus-routes [bus_routes]
  let new_graph [[] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] []]
  foreach bus_routes [
    let index 1
    let route ?
    while [index < (length route)]
    [
      let x item index route
      let y item (index - 1) route

      set new_graph (replace-item x new_graph (lput y (item x new_graph)))
      set new_graph (replace-item y new_graph (lput x (item y new_graph)))

      set index (index + 1)
    ]
  ]

  foreach new_graph [
    set ? remove-duplicates ?
  ]
  report new_graph
end

; Get shortest path between source and target in given graph using Dijkstra algorithm.
; Params:
;   {list} my_graph: graph representing the topology of the network of bus stops.
;   {number} source: source node for path.
;   {number} target: target node for path.
; Reports:
;    {list} S: list with shortest path between nodes.
to-report get-shortest-path [my_graph source target]
  let Q [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
  let dist n-values 24 [1000000000000]
  let prev n-values 24 [-1000]

  set dist (replace-item source dist 0)

  while [length Q != 0]
  [
    let u 0
    let min_val 1000000000000
    foreach Q [
      if item ? dist < min_val [
        set min_val item ? dist
        set u ?
      ]
    ]

    set Q remove u Q
    foreach (item u my_graph) [
      let alt (item u dist + get-distance u ?)
      if alt < item ? dist [
        set dist (replace-item ? dist alt)
        set prev (replace-item ? prev u)
      ]
    ]
  ]

  let S []
  let u target
  while [item u prev >= 0]
  [
    set S fput u S
    set u (item u prev)
  ]
  report S
end
