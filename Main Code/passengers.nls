; Count the remaining passengers on the specified route.
; Params:
;   {list} route: the bus route.
; Reports:
;   {number} counter: number of passengers in route.
to-report count-passengers-on-route [route]
  let counter 0
  foreach route [
    let current_station ?
    let stop_pass_list filter [can-transport-one-station current_station (item 1 ?) route] get-passengers-at-stop current_station
    set counter counter + length stop_pass_list
  ]
  report counter
end

; This functions returns wheather a bus can transport a passenger at least on station.
; Params:
;   {number} passenger_position: current bus stop the passenger is in.
;   {number} passenger_destination: the bus stop the passenger wants to go to.
;   {list} route: list of bus stops the bus is scheduled to go through.
; Reports:
;   {boolean} true, if the passenger can be transported by the bus for at least one station, false otherwise.
to-report can-transport-one-station [passenger_position passenger_destination route ]
  ifelse length route > 1 and passenger_position != passenger_destination  [
    let graph-to-be-used bus_routes_graph
    if is_scavenger [
      set graph-to-be-used graph
    ]
    let next-station item 0 (get-shortest-path graph-to-be-used passenger_position passenger_destination)
    let index 1
    while [index < (length route)]
    [
      if item (index - 1) route = passenger_position and (item index route) = next-station [
        report true
      ]
      set index (index + 1)
    ]
    report false
  ]
  [
    report false
  ]
end

; Count all the passengers in all the stations at the current tick.
to-report count-passengers-in-stations
  let pass 0
  foreach (n-values 24 [?])
  [
    let station ?
    set pass (pass + (length (get-passengers-at-stop station)))
  ]
  report pass
end
